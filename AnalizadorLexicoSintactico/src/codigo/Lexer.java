/* The following code was generated by JFlex 1.4.3 on 28/05/23, 22:44 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/23, 22:44 from the specification file
 * <tt>C:/Users/andre/OneDrive/Documents/NetBeansProjects/AnalizadorLexicoSintactico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\53\1\6\1\4"+
    "\1\0\1\56\1\51\1\0\1\57\1\60\1\50\1\47\1\3\1\34"+
    "\1\0\1\44\1\40\1\41\1\42\1\43\2\45\4\2\1\17\1\65"+
    "\1\55\1\46\1\54\2\0\1\35\3\37\1\35\2\37\1\36\1\35"+
    "\3\37\1\36\1\37\1\35\5\37\1\35\5\37\1\63\1\0\1\64"+
    "\1\0\1\1\1\0\1\10\1\13\1\24\1\23\1\15\1\30\1\27"+
    "\1\31\1\12\2\1\1\14\1\25\1\20\1\22\1\33\1\1\1\11"+
    "\1\16\1\21\1\32\1\7\1\1\1\26\2\1\1\61\1\52\1\62"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\15\2"+
    "\1\7\1\2\4\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\3\3\0\1\30\7\2"+
    "\1\31\14\2\1\32\1\2\1\0\2\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\7\0\2\2\1\45\25\2\3\0\2\46\7\2\1\47"+
    "\5\2\1\50\1\2\2\51\4\2\1\52\1\53\2\2"+
    "\1\3\3\0\10\2\1\54\4\2\1\55\1\2\1\56"+
    "\1\57\2\2\3\0\1\2\1\60\2\2\1\61\1\62"+
    "\12\2\1\0\2\46\1\2\2\63\2\2\1\64\1\2"+
    "\1\65\1\0\2\2\1\66\2\2\1\67\1\70\1\71"+
    "\1\72\1\73\1\0\1\74\4\2\1\0\1\2\1\0"+
    "\1\75\3\2\3\0\1\76\1\0\1\77\2\2\2\0"+
    "\3\2\2\0\3\2\1\100\1\0\1\101\2\102\2\0"+
    "\2\2\2\0\1\103\1\2\1\100\1\0\1\2\1\104"+
    "\1\2\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\66\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\u07ce\0\u0804\0\u083a\0\u0144"+
    "\0\u0144\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\66\0\u0ca8\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\154\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c"+
    "\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\154"+
    "\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\154\0\u176a\0\66"+
    "\0\154\0\u17a0\0\u17d6\0\u180c\0\u1842\0\154\0\154\0\u1878"+
    "\0\u18ae\0\66\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\154\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\154\0\154\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\154\0\u1dbe\0\u1df4\0\154"+
    "\0\154\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e"+
    "\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u1ce6\0\66\0\u207c\0\66"+
    "\0\154\0\u20b2\0\u20e8\0\154\0\u211e\0\154\0\u2154\0\u218a"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\154\0\154"+
    "\0\154\0\u2304\0\154\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412"+
    "\0\u2448\0\u247e\0\154\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c"+
    "\0\u25c2\0\66\0\u25f8\0\66\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\154\0\u2958\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\66\0\u2ad2\0\66\0\u2b08\0\u2b3e"+
    "\0\66\0\u2b74\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\12\1\13\1\3\1\14\1\15\1\16\1\2"+
    "\1\3\1\17\1\3\1\20\1\21\1\22\2\3\1\23"+
    "\1\24\1\3\1\25\1\26\3\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\4\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\67\0\2\3\4\0\10\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\22\0\1\55\14\0"+
    "\1\56\14\0\1\57\3\0\4\55\1\57\1\55\23\0"+
    "\1\5\62\0\5\6\1\0\60\6\5\60\1\0\1\61"+
    "\57\60\1\0\2\3\4\0\1\3\1\62\6\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\2\3\1\63\5\3\1\64\3\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\1\65\4\3\1\66\6\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\10\3\1\0\2\3\1\67\11\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\1\70\13\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\3\3\1\71\4\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\6\3\1\72"+
    "\1\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\6\3\1\73\1\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\2\3\1\74\7\3\1\75\1\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\3\3\1\76\4\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\3\3\1\77\2\3\1\100\1\3\1\0\12\3\1\101"+
    "\1\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\1\3\1\102\6\3\1\0\2\3\1\103\11\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\1\3\1\104"+
    "\1\105\5\3\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\66\0\1\106\20\0\2\3\4\0\10\3\1\0\14\3"+
    "\1\0\3\107\4\3\1\0\1\3\22\0\1\4\14\0"+
    "\1\110\20\0\1\111\3\4\1\0\1\4\22\0\1\4"+
    "\14\0\1\56\14\0\1\57\3\0\4\4\1\57\1\4"+
    "\22\0\1\112\14\0\1\56\14\0\1\57\3\0\4\4"+
    "\1\57\1\112\22\0\1\55\14\0\1\56\14\0\1\57"+
    "\3\0\2\112\2\55\1\57\1\55\66\0\1\113\65\0"+
    "\1\114\65\0\1\115\65\0\1\116\70\0\1\117\66\0"+
    "\1\120\61\0\1\121\65\0\1\122\65\0\1\123\65\0"+
    "\1\124\53\0\1\125\33\0\1\55\35\0\4\55\1\0"+
    "\1\55\22\0\1\126\35\0\1\127\1\130\2\131\1\0"+
    "\1\131\22\0\1\126\35\0\1\132\1\133\2\126\1\0"+
    "\1\126\21\0\2\3\4\0\2\3\1\134\5\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\5\3\1\135\6\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\4\3\1\136"+
    "\7\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\3\3\1\137\4\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\13\3\1\140"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\7\3\1\141\4\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\10\3\1\0\1\3\1\142\12\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\1\143\4\3\1\144\6\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\6\3\1\145"+
    "\5\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\1\146\7\3\1\0\4\3\1\147\7\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\10\3\1\0\3\3"+
    "\1\150\10\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\2\3\1\151\5\3\1\0\14\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\6\3\1\152\1\3"+
    "\1\0\14\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\10\3\1\0\1\153\13\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\4\3\1\154"+
    "\7\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\1\155\13\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\7\3\1\156\1\0\4\3\1\157"+
    "\7\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\2\3\1\160\5\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\2\3\1\161\5\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\2\3\1\162\11\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\14\3\1\0"+
    "\3\163\4\3\1\0\1\3\60\0\4\164\1\0\1\164"+
    "\22\0\1\55\14\0\1\110\20\0\4\55\1\0\1\55"+
    "\22\0\1\55\14\0\1\57\14\0\1\57\3\0\4\55"+
    "\1\57\1\55\22\0\1\165\35\0\4\165\1\0\1\165"+
    "\37\0\1\166\14\0\1\166\7\0\1\166\23\0\1\167"+
    "\35\0\1\170\3\167\1\0\1\167\22\0\1\170\14\0"+
    "\1\166\14\0\1\166\3\0\3\167\1\170\1\166\1\170"+
    "\22\0\1\170\14\0\1\166\14\0\1\166\3\0\4\170"+
    "\1\166\1\170\22\0\1\126\36\0\3\126\1\0\1\126"+
    "\37\0\1\166\14\0\1\166\3\0\3\126\1\0\1\166"+
    "\22\0\2\3\4\0\3\3\1\171\4\3\1\0\14\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\13\3\1\172\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\10\3\1\0\4\3\1\173\7\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\2\3\1\174"+
    "\5\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\3\3\1\175\4\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\6\3\1\176"+
    "\1\3\1\0\2\3\1\177\11\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\2\3\1\200"+
    "\11\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\4\3\1\201\3\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\1\3\1\202"+
    "\12\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\2\3\1\203\11\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\3\3\1\204\4\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\3\3\1\205\4\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\13\3\1\206"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\1\207\13\3\1\0\7\3\1\0\1\3\20\0"+
    "\1\210\2\211\2\210\1\0\1\210\10\211\1\210\14\211"+
    "\1\210\7\211\1\210\1\211\20\210\1\0\2\3\4\0"+
    "\10\3\1\0\11\3\1\212\2\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\4\3\1\213"+
    "\7\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\1\3\1\214\12\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\6\3\1\215\1\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\1\3\1\216\6\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\1\3\1\217\6\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\10\3\1\0\4\3\1\220\7\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\14\3\1\0"+
    "\3\221\4\3\1\0\1\3\22\0\1\170\35\0\4\170"+
    "\1\0\1\170\22\0\1\165\35\0\4\165\1\0\1\165"+
    "\12\0\1\222\7\0\1\223\35\0\4\223\1\0\1\223"+
    "\37\0\1\224\14\0\1\166\7\0\1\166\40\0\1\225"+
    "\47\0\2\3\4\0\1\3\1\226\6\3\1\0\14\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\6\3"+
    "\1\227\1\3\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\3\3\1\230\4\3\1\0\14\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\3\3"+
    "\1\231\4\3\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\10\3\1\0\4\3\1\232\7\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\2\3"+
    "\1\233\5\3\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\10\3\1\0\1\234\13\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\2\3\1\235\11\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\10\3\1\0\2\3\1\236\11\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\5\3\1\237"+
    "\2\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\10\3\1\0\5\3\1\240\6\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\7\3\1\241\4\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\10\3\1\0\1\3\1\242\12\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\1\3\1\243"+
    "\6\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\3\3\1\244\4\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\1\3\1\245"+
    "\6\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\2\3\1\246\5\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\6\3\1\247"+
    "\1\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\1\3\1\250\4\0\10\3\1\0\14\3\1\0\3\3"+
    "\4\250\1\0\1\250\22\0\1\251\35\0\4\251\1\0"+
    "\1\251\22\0\1\223\35\0\4\252\1\0\1\252\60\0"+
    "\4\253\1\0\1\253\21\0\2\3\4\0\4\3\1\254"+
    "\3\3\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\2\3\1\255\5\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\2\3\1\256\11\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\10\3\1\0\5\3\1\257\6\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\2\3\1\260\11\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\10\3\1\0\2\3\1\261\11\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\10\3\1\0"+
    "\4\3\1\262\7\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\5\3\1\263\2\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\2\3\4\0\1\264\7\3"+
    "\1\0\14\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\1\3\1\265\6\3\1\0\14\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\10\3\1\0\2\3"+
    "\1\266\11\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\2\3\1\267\5\3\1\0\14\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\10\3\1\0\11\3"+
    "\1\270\2\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\10\3\1\0\2\3\1\271\11\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\10\3\1\0\3\3"+
    "\1\272\10\3\1\0\7\3\1\0\1\3\21\0\1\3"+
    "\1\273\4\0\10\3\1\0\14\3\1\0\3\3\4\273"+
    "\1\0\1\273\22\0\1\274\35\0\4\274\1\0\1\274"+
    "\22\0\1\275\35\0\4\275\1\0\1\275\22\0\1\276"+
    "\35\0\4\276\1\0\1\276\21\0\2\3\4\0\5\3"+
    "\1\277\2\3\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\20\0\1\300\2\301\2\300\1\0\1\300\10\301\1\300"+
    "\14\301\1\300\7\301\1\300\1\301\20\300\1\0\2\3"+
    "\4\0\3\3\1\302\4\3\1\0\14\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\6\3\1\303\1\3"+
    "\1\0\14\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\10\3\1\0\2\3\1\304\11\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\6\3\1\305\1\3"+
    "\1\0\14\3\1\0\7\3\1\0\1\3\21\0\2\3"+
    "\4\0\5\3\1\306\2\3\1\0\14\3\1\0\7\3"+
    "\1\0\1\3\21\0\2\3\4\0\10\3\1\0\14\3"+
    "\1\307\7\3\1\0\1\3\21\0\2\3\4\0\1\3"+
    "\1\310\6\3\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\10\3\1\0\2\3\1\311\11\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\1\312\13\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\3\3\1\313\4\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\1\3\1\314\4\0\10\3"+
    "\1\0\14\3\1\0\3\3\4\314\1\0\1\314\22\0"+
    "\1\315\35\0\4\315\1\0\1\315\21\0\2\3\4\0"+
    "\6\3\1\316\1\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\2\3\1\317\5\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\7\3\1\320\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\2\3\1\321\5\3\1\0\14\3"+
    "\1\0\7\3\1\0\1\3\53\0\1\322\33\0\2\3"+
    "\4\0\7\3\1\323\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\2\3\1\324\5\3\1\0"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\6\3\1\325\1\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\2\3\4\0\10\3\1\0\5\3\1\326"+
    "\6\3\1\0\7\3\1\0\1\3\21\0\1\3\1\327"+
    "\4\0\10\3\1\0\14\3\1\0\3\3\4\327\1\0"+
    "\1\327\54\0\1\330\32\0\2\3\4\0\7\3\1\331"+
    "\1\0\14\3\1\0\7\3\1\0\1\3\31\0\1\332"+
    "\55\0\2\3\4\0\1\3\1\333\6\3\1\0\14\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\7\3"+
    "\1\334\1\0\14\3\1\0\7\3\1\0\1\3\21\0"+
    "\2\3\4\0\3\3\1\335\4\3\1\0\14\3\1\0"+
    "\7\3\1\0\1\3\21\0\1\3\1\336\4\0\10\3"+
    "\1\0\14\3\1\0\3\3\4\336\1\0\1\336\22\0"+
    "\1\337\35\0\2\340\1\341\1\337\1\0\1\337\21\0"+
    "\2\3\4\0\10\3\1\342\14\3\1\0\7\3\1\0"+
    "\1\3\32\0\1\343\54\0\2\3\4\0\10\3\1\344"+
    "\14\3\1\0\7\3\1\0\1\3\21\0\2\3\4\0"+
    "\6\3\1\345\1\3\1\0\14\3\1\0\7\3\1\0"+
    "\1\3\21\0\1\3\1\346\4\0\10\3\1\0\14\3"+
    "\1\0\3\3\4\346\1\0\1\346\37\0\1\347\50\0"+
    "\1\337\14\0\1\347\20\0\4\337\1\0\1\337\37\0"+
    "\1\347\20\0\4\337\42\0\1\350\46\0\2\3\4\0"+
    "\10\3\1\0\1\351\13\3\1\0\7\3\1\0\1\3"+
    "\21\0\1\3\1\352\4\0\10\3\1\0\14\3\1\0"+
    "\1\352\1\353\5\352\1\0\1\352\60\0\4\354\1\0"+
    "\1\354\44\0\1\355\42\0\2\3\4\0\10\3\1\0"+
    "\1\3\1\356\12\3\1\0\7\3\1\0\1\3\21\0"+
    "\1\3\1\357\4\0\10\3\1\0\14\3\1\0\7\357"+
    "\1\0\1\357\21\0\1\3\1\357\4\0\10\3\1\0"+
    "\14\3\1\0\3\360\4\357\1\0\1\357\22\0\1\361"+
    "\35\0\4\361\1\0\1\361\32\0\1\362\54\0\2\3"+
    "\4\0\10\3\1\0\2\3\1\363\11\3\1\0\7\3"+
    "\1\0\1\3\21\0\1\3\1\364\4\0\10\3\1\0"+
    "\14\3\1\0\7\364\1\0\1\364\21\0\1\3\1\364"+
    "\4\0\10\3\1\0\14\3\1\0\3\365\4\364\1\0"+
    "\1\364\37\0\1\366\101\0\1\367\33\0\2\3\4\0"+
    "\7\3\1\370\1\0\14\3\1\0\7\3\1\0\1\3"+
    "\21\0\2\3\4\0\10\3\1\0\14\3\1\0\1\3"+
    "\2\371\4\3\1\0\1\3\60\0\4\372\1\0\1\372"+
    "\30\0\1\373\56\0\2\3\4\0\10\3\1\374\14\3"+
    "\1\0\7\3\1\0\1\3\21\0\2\3\4\0\10\3"+
    "\1\0\14\3\1\0\1\3\2\375\4\3\1\0\1\3"+
    "\22\0\1\376\35\0\4\376\1\0\1\376\34\0\1\377"+
    "\52\0\2\3\4\0\10\3\1\0\14\3\1\0\1\3"+
    "\2\u0100\4\3\1\0\1\3\37\0\1\u0101\47\0\1\3"+
    "\1\u0102\4\0\10\3\1\0\14\3\1\0\7\u0102\1\0"+
    "\1\u0102\21\0\1\3\1\u0103\4\0\10\3\1\0\14\3"+
    "\1\0\3\3\4\u0103\1\0\1\u0103\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11178];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\37\1\6\11\1\1\3\0"+
    "\25\1\1\11\1\1\1\0\2\1\12\11\7\0\30\1"+
    "\3\0\21\1\1\11\11\1\1\11\3\0\23\1\3\0"+
    "\20\1\1\0\1\1\1\11\1\1\1\11\6\1\1\0"+
    "\12\1\1\0\5\1\1\0\1\1\1\0\4\1\3\0"+
    "\1\11\1\0\1\11\2\1\2\0\3\1\2\0\4\1"+
    "\1\0\3\1\2\0\2\1\2\0\1\11\1\1\1\11"+
    "\1\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[259];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { lexeme=yytext(); return Para;
          }
        case 70: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 71: break;
        case 65: 
          { lexeme=yytext(); return Procedimiento;
          }
        case 72: break;
        case 33: 
          { lexeme = yytext(); return Diferente;
          }
        case 73: break;
        case 23: 
          { lexeme=yytext(); return P_coma;
          }
        case 74: break;
        case 49: 
          { lexeme = yytext(); return TLogico;
          }
        case 75: break;
        case 19: 
          { lexeme=yytext(); return Llave_a;
          }
        case 76: break;
        case 54: 
          { lexeme=yytext(); return Funcion;
          }
        case 77: break;
        case 51: 
          { lexeme=yytext(); return Inicio;
          }
        case 78: break;
        case 66: 
          { lexeme=yytext(); return Rfc;
          }
        case 79: break;
        case 60: 
          { lexeme=yytext(); return Mientras;
          }
        case 80: break;
        case 64: 
          { lexeme=yytext(); return Fecha_hora;
          }
        case 81: break;
        case 67: 
          { lexeme=yytext(); return Procedimientos;
          }
        case 82: break;
        case 57: 
          { lexeme=yytext(); return Imprimir;
          }
        case 83: break;
        case 59: 
          { lexeme=yytext(); return Devolver;
          }
        case 84: break;
        case 47: 
          { lexeme=yytext(); return Hacer;
          }
        case 85: break;
        case 5: 
          { return Linea;
          }
        case 86: break;
        case 41: 
          { lexeme=yytext(); return Fin;
          }
        case 87: break;
        case 55: 
          { lexeme=yytext(); return Fecha;
          }
        case 88: break;
        case 28: 
          { lexeme = yytext(); return Igualdad;
          }
        case 89: break;
        case 8: 
          { lexeme=yytext(); return Division;
          }
        case 90: break;
        case 48: 
          { lexeme=yytext(); return Romper;
          }
        case 91: break;
        case 39: 
          { lexeme=yytext(); return Sino;
          }
        case 92: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 93: break;
        case 20: 
          { lexeme=yytext(); return Llave_c;
          }
        case 94: break;
        case 29: 
          { lexeme = yytext(); return Op_atribucion_suma;
          }
        case 95: break;
        case 17: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 96: break;
        case 13: 
          { lexeme = yytext(); return Op_bitwise_or;
          }
        case 97: break;
        case 52: 
          { lexeme = yytext(); return Tsimbolo;
          }
        case 98: break;
        case 44: 
          { lexeme = yytext(); return Ttexto;
          }
        case 99: break;
        case 12: 
          { lexeme = yytext(); return Op_bitwise_and;
          }
        case 100: break;
        case 6: 
          { lexeme=yytext(); return Comillas;
          }
        case 101: break;
        case 31: 
          { lexeme = yytext(); return Op_logico_and;
          }
        case 102: break;
        case 14: 
          { lexeme = yytext(); return Op_logico_not;
          }
        case 103: break;
        case 21: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 104: break;
        case 32: 
          { lexeme = yytext(); return Op_logico_or;
          }
        case 105: break;
        case 40: 
          { lexeme = yytext(); return Tcurp;
          }
        case 106: break;
        case 27: 
          { lexeme = yytext(); return Op_atribucion_division;
          }
        case 107: break;
        case 24: 
          { lexeme=yytext(); return Cadena;
          }
        case 108: break;
        case 46: 
          { lexeme=yytext(); return Hasta;
          }
        case 109: break;
        case 45: 
          { lexeme = yytext(); return Tfecha;
          }
        case 110: break;
        case 42: 
          { lexeme = yytext(); return Thora;
          }
        case 111: break;
        case 68: 
          { lexeme=yytext(); return CodigoPrincipal;
          }
        case 112: break;
        case 53: 
          { lexeme = yytext(); return Tdecimal;
          }
        case 113: break;
        case 50: 
          { lexeme = yytext(); return Tentero;
          }
        case 114: break;
        case 7: 
          { lexeme=yytext(); return Resta;
          }
        case 115: break;
        case 61: 
          { lexeme = yytext(); return Tfechahora;
          }
        case 116: break;
        case 58: 
          { lexeme=yytext(); return Entonces;
          }
        case 117: break;
        case 56: 
          { lexeme=yytext(); return Variable;
          }
        case 118: break;
        case 15: 
          { lexeme = yytext(); return MayorQue;
          }
        case 119: break;
        case 62: 
          { lexeme=yytext(); return Variables;
          }
        case 120: break;
        case 30: 
          { lexeme = yytext(); return Op_atribucion_multiplicacion;
          }
        case 121: break;
        case 34: 
          { lexeme = yytext(); return MayorIgual;
          }
        case 122: break;
        case 18: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 123: break;
        case 25: 
          { lexeme=yytext(); return Si;
          }
        case 124: break;
        case 11: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 125: break;
        case 36: 
          { lexeme = yytext(); return Op_atribucion_modulo;
          }
        case 126: break;
        case 22: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 127: break;
        case 1: 
          { return ERROR;
          }
        case 128: break;
        case 26: 
          { lexeme = yytext(); return Op_atribucion_resta;
          }
        case 129: break;
        case 69: 
          { lexeme=yytext(); return Curp;
          }
        case 130: break;
        case 9: 
          { lexeme=yytext(); return Igual;
          }
        case 131: break;
        case 4: 
          { /*Ignore*/
          }
        case 132: break;
        case 35: 
          { lexeme = yytext(); return MenorIgual;
          }
        case 133: break;
        case 38: 
          { lexeme=yytext(); return Hora;
          }
        case 134: break;
        case 16: 
          { lexeme = yytext(); return MenorQue;
          }
        case 135: break;
        case 37: 
          { lexeme = yytext(); return Trfc;
          }
        case 136: break;
        case 63: 
          { lexeme=yytext(); return Funciones;
          }
        case 137: break;
        case 10: 
          { lexeme=yytext(); return Suma;
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
